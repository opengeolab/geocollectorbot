name: Geo Collector Bot CI

env:
  context: ./
  cache-name: cache-build

on:
  push:
    branches: [ main ]
    tags: ['*']
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Git checkout
        uses: actions/checkout@v2

      - name: Use Node.js 18.x
        uses: actions/setup-node@v1
        with:
          node-version: 18.x

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - name: Yarn Cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install --immutable

      - run: yarn test

      - name: Compile file and build
        if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.base_ref == 'main' }}
        run: yarn build

      - name: Cache build directory
        uses: actions/cache@v3
        id: build-cache
        with:
          path: |
            ${{ env.context }}build
          key: ${{ runner.os }}-build-${{ github.sha }}

  docker-build:
    name: Build docker
    needs: test
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=geolabpolimi/geo-collector-bot
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=$(echo ${VERSION} | sed s/^v//)
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            VERSION=latest
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=image::${DOCKER_IMAGE}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.BOT_DOCKER_USERNAME }}
          password: ${{ secrets.BOT_DOCKER_TOKEN }}

      - name: Cache build
        uses: actions/cache@v3
        id: build-cache
        with:
          path: |
            ${{ env.context }}build
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ github.sha }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: '${{ env.context }}'
          push: true
          tags: ${{ steps.prep.outputs.tags }}
